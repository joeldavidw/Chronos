// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google_auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct MigrationPayload: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var otpParameters: [MigrationPayload.OtpParameters] = []

    var version: Int32 = 0

    var batchSize: Int32 = 0

    var batchIndex: Int32 = 0

    var batchID: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Algorithm: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case unspecified // = 0
        case sha1 // = 1
        case sha256 // = 2
        case sha512 // = 3
        case md5 // = 4
        case UNRECOGNIZED(Int)

        init() {
            self = .unspecified
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unspecified
            case 1: self = .sha1
            case 2: self = .sha256
            case 3: self = .sha512
            case 4: self = .md5
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .unspecified: return 0
            case .sha1: return 1
            case .sha256: return 2
            case .sha512: return 3
            case .md5: return 4
            case let .UNRECOGNIZED(i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [MigrationPayload.Algorithm] = [
            .unspecified,
            .sha1,
            .sha256,
            .sha512,
            .md5,
        ]
    }

    enum DigitCount: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case unspecified // = 0
        case six // = 1
        case eight // = 2
        case UNRECOGNIZED(Int)

        init() {
            self = .unspecified
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unspecified
            case 1: self = .six
            case 2: self = .eight
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .unspecified: return 0
            case .six: return 1
            case .eight: return 2
            case let .UNRECOGNIZED(i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [MigrationPayload.DigitCount] = [
            .unspecified,
            .six,
            .eight,
        ]
    }

    enum OtpType: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case unspecified // = 0
        case hotp // = 1
        case totp // = 2
        case UNRECOGNIZED(Int)

        init() {
            self = .unspecified
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unspecified
            case 1: self = .hotp
            case 2: self = .totp
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .unspecified: return 0
            case .hotp: return 1
            case .totp: return 2
            case let .UNRECOGNIZED(i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [MigrationPayload.OtpType] = [
            .unspecified,
            .hotp,
            .totp,
        ]
    }

    struct OtpParameters: @unchecked Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var secret: Data = .init()

        var name: String = .init()

        var issuer: String = .init()

        var algorithm: MigrationPayload.Algorithm = .unspecified

        var digits: MigrationPayload.DigitCount = .unspecified

        var type: MigrationPayload.OtpType = .unspecified

        var counter: Int64 = 0

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
    }

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MigrationPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "MigrationPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "otp_parameters"),
        2: .same(proto: "version"),
        3: .standard(proto: "batch_size"),
        4: .standard(proto: "batch_index"),
        5: .standard(proto: "batch_id"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &otpParameters)
            case 2: try decoder.decodeSingularInt32Field(value: &version)
            case 3: try decoder.decodeSingularInt32Field(value: &batchSize)
            case 4: try decoder.decodeSingularInt32Field(value: &batchIndex)
            case 5: try decoder.decodeSingularInt32Field(value: &batchID)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !otpParameters.isEmpty {
            try visitor.visitRepeatedMessageField(value: otpParameters, fieldNumber: 1)
        }
        if version != 0 {
            try visitor.visitSingularInt32Field(value: version, fieldNumber: 2)
        }
        if batchSize != 0 {
            try visitor.visitSingularInt32Field(value: batchSize, fieldNumber: 3)
        }
        if batchIndex != 0 {
            try visitor.visitSingularInt32Field(value: batchIndex, fieldNumber: 4)
        }
        if batchID != 0 {
            try visitor.visitSingularInt32Field(value: batchID, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: MigrationPayload, rhs: MigrationPayload) -> Bool {
        if lhs.otpParameters != rhs.otpParameters { return false }
        if lhs.version != rhs.version { return false }
        if lhs.batchSize != rhs.batchSize { return false }
        if lhs.batchIndex != rhs.batchIndex { return false }
        if lhs.batchID != rhs.batchID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension MigrationPayload.Algorithm: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "ALGORITHM_UNSPECIFIED"),
        1: .same(proto: "ALGORITHM_SHA1"),
        2: .same(proto: "ALGORITHM_SHA256"),
        3: .same(proto: "ALGORITHM_SHA512"),
        4: .same(proto: "ALGORITHM_MD5"),
    ]
}

extension MigrationPayload.DigitCount: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "DIGIT_COUNT_UNSPECIFIED"),
        1: .same(proto: "DIGIT_COUNT_SIX"),
        2: .same(proto: "DIGIT_COUNT_EIGHT"),
    ]
}

extension MigrationPayload.OtpType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "OTP_TYPE_UNSPECIFIED"),
        1: .same(proto: "OTP_TYPE_HOTP"),
        2: .same(proto: "OTP_TYPE_TOTP"),
    ]
}

extension MigrationPayload.OtpParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = MigrationPayload.protoMessageName + ".OtpParameters"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "secret"),
        2: .same(proto: "name"),
        3: .same(proto: "issuer"),
        4: .same(proto: "algorithm"),
        5: .same(proto: "digits"),
        6: .same(proto: "type"),
        7: .same(proto: "counter"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &secret)
            case 2: try decoder.decodeSingularStringField(value: &name)
            case 3: try decoder.decodeSingularStringField(value: &issuer)
            case 4: try decoder.decodeSingularEnumField(value: &algorithm)
            case 5: try decoder.decodeSingularEnumField(value: &digits)
            case 6: try decoder.decodeSingularEnumField(value: &type)
            case 7: try decoder.decodeSingularInt64Field(value: &counter)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !secret.isEmpty {
            try visitor.visitSingularBytesField(value: secret, fieldNumber: 1)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 2)
        }
        if !issuer.isEmpty {
            try visitor.visitSingularStringField(value: issuer, fieldNumber: 3)
        }
        if algorithm != .unspecified {
            try visitor.visitSingularEnumField(value: algorithm, fieldNumber: 4)
        }
        if digits != .unspecified {
            try visitor.visitSingularEnumField(value: digits, fieldNumber: 5)
        }
        if type != .unspecified {
            try visitor.visitSingularEnumField(value: type, fieldNumber: 6)
        }
        if counter != 0 {
            try visitor.visitSingularInt64Field(value: counter, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: MigrationPayload.OtpParameters, rhs: MigrationPayload.OtpParameters) -> Bool {
        if lhs.secret != rhs.secret { return false }
        if lhs.name != rhs.name { return false }
        if lhs.issuer != rhs.issuer { return false }
        if lhs.algorithm != rhs.algorithm { return false }
        if lhs.digits != rhs.digits { return false }
        if lhs.type != rhs.type { return false }
        if lhs.counter != rhs.counter { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
